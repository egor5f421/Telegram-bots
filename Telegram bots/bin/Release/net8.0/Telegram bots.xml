<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telegram bots</name>
    </assembly>
    <members>
        <member name="T:Telegram_bots.Chat">
            <summary>
            The object providing the chat
            </summary>
        </member>
        <member name="T:Telegram_bots.Chat.Types">
            <summary>
            Chat Types
            </summary>
        </member>
        <member name="F:Telegram_bots.Chat.Types.Private">
            <summary>
            Private chat
            </summary>
        </member>
        <member name="F:Telegram_bots.Chat.Types.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:Telegram_bots.Chat.Types.Supergroup">
            <summary>
            Supergroup
            </summary>
        </member>
        <member name="F:Telegram_bots.Chat.Types.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.Id">
            <summary>
            Chat id
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.Type">
            <summary>
            Chat Type
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.Title">
            <summary>
            Chat Title
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.FirstName">
            <summary>
            Chat`s first name
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.LastName">
            <summary>
            Chat's last name
            </summary>
        </member>
        <member name="P:Telegram_bots.Chat.Username">
            <summary>
            Chat username
            </summary>
        </member>
        <member name="M:Telegram_bots.Chat.FromJSON(System.Text.Json.JsonDocument)">
            <summary>
            Make a chat from JsonDocument
            </summary>
            <param name="jsonDocument">JsonDocument</param>
            <returns>Chat</returns>
            <exception cref="T:System.ArgumentException">Called if some argument is incorrect</exception>
        </member>
        <member name="M:Telegram_bots.Chat.FromJSON(System.Text.Json.JsonElement)">
            <summary>
            Make a chat from JsonElement
            </summary>
            <param name="rootJsonElement">JsonElement</param>
            <returns>Chat</returns>
        </member>
        <member name="M:Telegram_bots.Chat.FromJSON(System.String)">
            <summary>
            Make a chat from a json string
            </summary>
            <param name="jsonString">Json string</param>
            <returns>Chat</returns>
        </member>
        <member name="M:Telegram_bots.Chat.ToString">
            <summary>
            Turns it into a string
            </summary>
            <returns>A string representing the chat</returns>
        </member>
        <member name="T:Telegram_bots.Exceptions.IncorrectRequestException">
            <summary>
            An exception that is raised when an incorrect request was made
            </summary>
        </member>
        <member name="M:Telegram_bots.Exceptions.IncorrectRequestException.#ctor">
            <summary>
            Causes an exception
            </summary>
        </member>
        <member name="M:Telegram_bots.Exceptions.IncorrectRequestException.#ctor(System.String)">
            <summary>
            Causes an exception
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Telegram_bots.Exceptions.IncorrectRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Causes an exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Parental error</param>
        </member>
        <member name="M:Telegram_bots.Exceptions.IncorrectRequestException.ThrowIfNotOk(System.Text.Json.JsonDocument)">
            <summary>
            Checks the value of "ok" in the JsonDocument and if it is "false" it throws an exception
            </summary>
            <param name="json">The JsonDocument that needs to be checked</param>
        </member>
        <member name="T:Telegram_bots.Message">
            <summary>
            The class representing the message
            </summary>
        </member>
        <member name="P:Telegram_bots.Message.Id">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:Telegram_bots.Message.Datetime">
            <summary>
            Date the message was sent
            </summary>
        </member>
        <member name="P:Telegram_bots.Message.Chat">
            <summary>
            The chat to which the message was sent
            </summary>
        </member>
        <member name="P:Telegram_bots.Message.Text">
            <summary>
            The text of the message
            </summary>
        </member>
        <member name="P:Telegram_bots.Message.From">
            <summary>
            The sender of the message
            </summary>
        </member>
        <member name="M:Telegram_bots.Message.Equals(System.Object)">
            <summary>
            Checks if the objects are the same
            </summary>
            <param name="obj">Object</param>
            <returns>Are the objects the same</returns>
        </member>
        <member name="M:Telegram_bots.Message.FromJSON(System.Text.Json.JsonDocument)">
            <summary>
            Create a message from a JsonDocument
            </summary>
            <param name="jsonDocument">JsonDocument</param>
            <returns>Message</returns>
        </member>
        <member name="M:Telegram_bots.Message.FromJSON(System.Text.Json.JsonElement)">
            <summary>
            Create a message from a JsonElement
            </summary>
            <param name="rootJsonElement">Root JsonElement</param>
            <returns>Message</returns>
        </member>
        <member name="M:Telegram_bots.Message.FromJSON(System.String)">
            <summary>
            Create a message from a json string
            </summary>
            <param name="jsonString">Json string</param>
            <returns>Message</returns>
        </member>
        <member name="M:Telegram_bots.Message.ToString">
            <summary>
            Turns it into a string
            </summary>
            <returns>The string representing the message</returns>
        </member>
        <member name="M:Telegram_bots.Message.GetHashCode">
            <summary>
            Returns the hash code of the message
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Telegram_bots.TelegramBot">
            <summary>
            This class is a telegram bot
            </summary>
        </member>
        <member name="F:Telegram_bots.TelegramBot.Token">
            <summary>
            Token for the bot
            </summary>
        </member>
        <member name="F:Telegram_bots.TelegramBot.lastChatId">
            <summary>
            Chat_id from the last message
            </summary>
        </member>
        <member name="F:Telegram_bots.TelegramBot.lastUpdateId">
            <summary>
            Update_id from the last update
            </summary>
        </member>
        <member name="F:Telegram_bots.TelegramBot.httpClient">
            <summary>
            An object for network access
            </summary>
        </member>
        <member name="M:Telegram_bots.TelegramBot.#ctor(System.String)">
            <summary>
            A constructor for creating a bot
            </summary>
            <param name="Token">Token for the bot</param>
            <exception cref="T:Telegram_bots.Exceptions.IncorrectRequestException">Called if you entered the wrong token</exception>
            <example>
            <code>
            public static async Task Main(string[] args)
            {
                using TelegramBot bot = new (args[0]);
            }
            </code>
            </example>
        </member>
        <member name="M:Telegram_bots.TelegramBot.GetMe">
            <summary>
            Receives information about the bot
            </summary>
            <exception cref="T:Telegram_bots.Exceptions.IncorrectRequestException">It is thrown if an incorrect request was made</exception>
            <returns>Information about the bot</returns>
        </member>
        <member name="M:Telegram_bots.TelegramBot.SendMessage(System.String,System.Int64)">
            <summary>
            Sends a message
            </summary>
            <param name="Text">The text of the message</param>
            <param name="ChatId">Chat_id of the chat to send the message to</param>
            <exception cref="T:System.ArgumentNullException">It is thrown if one of the arguments is null</exception>
            <exception cref="T:Telegram_bots.Exceptions.IncorrectRequestException">It is thrown if an incorrect request was made</exception>
            <returns>The message that was sent</returns>
        </member>
        <member name="M:Telegram_bots.TelegramBot.SendMessage(System.String)">
            <summary>
            Sends a message to the chat from which the latest update was received
            </summary>
            <param name="Text">The text of the message</param>
            <exception cref="T:System.ArgumentNullException">It is thrown if one of the arguments is null</exception>
            <exception cref="T:Telegram_bots.Exceptions.IncorrectRequestException">It is thrown if an incorrect request was made</exception>
            <returns>The message that was sent</returns>
        </member>
        <member name="M:Telegram_bots.TelegramBot.StartPolling">
            <summary>
            Start polling
            </summary>
            <exception cref="T:Telegram_bots.Exceptions.IncorrectRequestException">It is thrown if an incorrect request was made</exception>
            <returns></returns>
        </member>
        <member name="T:Telegram_bots.TelegramBot.UpdateHandler">
            <summary>
            Signature of the "OnUpdate" event
            </summary>
            <param name="update">The latest update</param>
            <param name="bot">Telegram bot</param>
        </member>
        <member name="E:Telegram_bots.TelegramBot.OnUpdate">
            <summary>
            Called if an update has arrived
            </summary>
        </member>
        <member name="M:Telegram_bots.TelegramBot.Dispose(System.Boolean)">
            <summary>
            Release the resources occupied by the bot
            </summary>
            <param name="disposing">Release managed resources</param>
        </member>
        <member name="M:Telegram_bots.TelegramBot.Finalize">
            <summary>
            Release unmanaged resources occupied by the bot
            </summary>
        </member>
        <member name="M:Telegram_bots.TelegramBot.Dispose">
            <summary>
            Release the resources occupied by the bot
            </summary>
        </member>
        <member name="T:Telegram_bots.Update">
            <summary>
            A class representing Update
            </summary>
        </member>
        <member name="P:Telegram_bots.Update.UpdateId">
            <summary>
            Update ID
            </summary>
        </member>
        <member name="P:Telegram_bots.Update.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:Telegram_bots.Update.Equals(System.Object)">
            <summary>
            Checks the similarity of objects
            </summary>
            <param name="obj">Object</param>
            <returns>The similarity of objects</returns>
        </member>
        <member name="M:Telegram_bots.Update.FromJSON(System.Text.Json.JsonDocument)">
            <summary>
            Get an update from a JsonDocument
            </summary>
            <param name="jsonDocument">JsonDocument</param>
            <returns>Update</returns>
        </member>
        <member name="M:Telegram_bots.Update.FromJSON(System.Text.Json.JsonElement)">
            <summary>
            Get an update from a JsonElement
            </summary>
            <param name="rootJsonElement">Root JsonElement</param>
            <returns>Update</returns>
        </member>
        <member name="M:Telegram_bots.Update.FromJSON(System.String)">
            <summary>
            Get an update from a json string
            </summary>
            <param name="jsonString">Json string</param>
            <returns>Update</returns>
        </member>
        <member name="M:Telegram_bots.Update.ToString">
            <summary>
            Turns it into a string
            </summary>
            <returns>The line representing the update</returns>
        </member>
        <member name="M:Telegram_bots.Update.GetHashCode">
            <summary>
            Returns the hash code of the message
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Telegram_bots.User">
            <summary>
            A class representing the user
            </summary>
        </member>
        <member name="P:Telegram_bots.User.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:Telegram_bots.User.IsBot">
            <summary>
            Is the user a bot?
            </summary>
        </member>
        <member name="P:Telegram_bots.User.FirstName">
            <summary>
            First name`s user
            </summary>
        </member>
        <member name="P:Telegram_bots.User.LastName">
            <summary>
            Last name of the user
            </summary>
        </member>
        <member name="P:Telegram_bots.User.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Telegram_bots.User.IsPremium">
            <summary>
            A premium user?
            </summary>
        </member>
        <member name="M:Telegram_bots.User.FromJSON(System.Text.Json.JsonDocument)">
            <summary>
            Get an update from a JsonDocument
            </summary>
            <param name="jsonDocument">JsonDocument</param>
            <returns>User</returns>
        </member>
        <member name="M:Telegram_bots.User.FromJSON(System.Text.Json.JsonElement)">
            <summary>
            Get an update from a JsonElement
            </summary>
            <param name="rootJsonElement">Root JsonElement</param>
            <returns>User</returns>
        </member>
        <member name="M:Telegram_bots.User.FromJSON(System.String)">
            <summary>
            Get an update from a json string
            </summary>
            <param name="jsonString">Json string</param>
            <returns>User</returns>
        </member>
        <member name="M:Telegram_bots.User.ToString">
            <summary>
            Turns it into a string
            </summary>
            <returns>The line representing the user</returns>
        </member>
    </members>
</doc>
